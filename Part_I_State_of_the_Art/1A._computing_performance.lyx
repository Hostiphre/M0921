#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex8
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Basics of Algorithm Complexity
\begin_inset CommandInset label
LatexCommand label
name "chpt:computing-performance"

\end_inset


\end_layout

\begin_layout Standard
Algorithm complexity is one of crucial criteria to evaluate the theoretical
 performance of the code, as defined below:
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 be two functions defined over the natural numbers 
\begin_inset Formula $\mathbb{N}$
\end_inset

.
 We write
\begin_inset Formula 
\begin{equation}
f=O(g)
\end{equation}

\end_inset

if there is a strictly positive constant 
\begin_inset Formula $c>0$
\end_inset

 such that from a certain number 
\begin_inset Formula $n>n_{0}$
\end_inset

 we always have 
\begin_inset Formula $\left|f(n)\right|\leq c\left|g(n)\right|$
\end_inset

.
 The 
\begin_inset Formula $O$
\end_inset

 is also called the big-O notation 
\begin_inset CommandInset citation
LatexCommand citep
key "Complexity"

\end_inset

, or order of growth.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:order-of-growth"

\end_inset

 shows the growth tendency of some frequent functions.
 We can see:
\begin_inset Formula 
\begin{equation}
O(1)>O(\log_{2}n)>O(n)>O(n\log_{2}n)>O(n^{2})>O(2^{n})>O(n!)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../_figure/orders-of-growth.pdf
	width 75text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Function growth
\begin_inset CommandInset label
LatexCommand label
name "fig:order-of-growth"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this thesis, the big-O notation is used to measure algorithm complexity.
 Other notations can also be used for the same purpose, such as:
\end_layout

\begin_layout Itemize
\begin_inset Formula $f=o(g)$
\end_inset

 if 
\begin_inset Formula $f(n)/g(n)\rightarrow0$
\end_inset

, 
\begin_inset Formula $n\rightarrow\infty$
\end_inset


\end_layout

\begin_layout Itemize
The inverse of big-O notation 
\begin_inset Formula $f=\Omega(g)$
\end_inset

 if 
\begin_inset Formula $g=O(f)$
\end_inset


\end_layout

\begin_layout Itemize
The notation 
\begin_inset Formula $f=\Theta(g)$
\end_inset

 means that both 
\begin_inset Formula $f=O(g)$
\end_inset

 and 
\begin_inset Formula $g=O(f)$
\end_inset

 hold, and we can also say they are of the same order.
\end_layout

\begin_layout Standard
In code development we always search for algorithms with a lower algorithm
 complexity.
 Ideally, the implementation of code matches the model and has the same
 growth tendency as its complexity.
 But in the practical case, overheads and memory delay can also limit the
 performance.
\end_layout

\end_body
\end_document
